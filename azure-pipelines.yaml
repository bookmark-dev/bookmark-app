name: $(date:yyyyMMdd)$(rev:.rr)

pr:
  - synaodev

trigger:
- synaodev

stages:
  - stage: build
    jobs:
      - job: run_build
        steps:
          - script: dotnet build
  - stage: test
    jobs:
      - job: run_tests
        steps:
          - script: dotnet test
  - stage: analyze
    jobs:
      - job: run_analysis
        pool:
          vmImage: ubuntu-18.04
        steps:
          - task: DotnetGlobalToolInstaller@0
            inputs:
              name: "dotnet-sonarscanner"
          - script: |
              dotnet sonarscanner begin /k:"bookmark-app" /o:"bookmark-dev" /d:sonar.login=$SONAR_TOKEN /d:sonar.host.url="https://sonarcloud.io/"
              dotnet build
              dotnet sonarscanner end /d:sonar.login=$SONAR_TOKEN
            env:
              SONAR_TOKEN: $(SonarToken)
  - stage: pack
    jobs:
      - job: pack_client
        steps:
          - task: Docker@2
            inputs:
              command: login
              containerRegistry: docker
          - script: |
              docker image build --file client.dockerfile --tag synaodev/bookmark-client .
              docker image push synaodev/bookmark-client
          - task: Docker@2
            inputs:
              command: logout
              containerRegistry: docker
      - job: pack_restapi
        steps:
          - task: Docker@2
            inputs:
              command: login
              containerRegistry: docker
          - script: |
              docker image build --file restapi.dockerfile --tag synaodev/bookmark-restapi .
              docker image push synaodev/bookmark-restapi
          - task: Docker@2
            inputs:
              command: logout
              containerRegistry: docker
      - job: pack_ormdata
        steps:
          - task: Docker@2
            inputs:
              command: login
              containerRegistry: docker
          - script: |
              docker image build --file ormdata.dockerfile --tag synaodev/bookmark-ormdata .
              docker image push synaodev/bookmark-ormdata
          - task: Docker@2
            inputs:
              command: logout
              containerRegistry: docker
  - stage: deploy
    jobs:
      - job: deploy_app
        pool:
          vmImage: ubuntu-18.04
        steps:
          - task: DockerCompose@0
            displayName: Docker Compose
            inputs:
              action: Run a Docker Compose command
              azureSubscriptionEndpoint: $(AzureSubscriptionEndpoint)
              azureContainerRegistry: $(AzureContainerRegistry)
              dockerComposeFile: docker-compose.yaml
              dockerComposeCommand: up -d
              projectName: bookmark-app
              qualifyImageNames: true
              buildImages: true
              detached: true
          - task: AzureWebAppContainer@1
            displayName: Web App Container
            inputs:
              azureSubscription: azure-resources
              resourceGroupName: $(AzureResourceGroup)
              containers: $(AzureContainerRegistry)/bookmark-app:latest
              appName: web-bookmark-app
              slotName: staging
              deployToSlotOrASE: true
          - task: AzureAppServiceManage@0
            displayName: Service Manager
            inputs:
              Action: Start Azure App Service
              azureSubscription: azure-resources
              ResourceGroupName: $(AzureResourceGroup)
              SwapWithProduction: true
              WebAppName: web-bookmark-app
              SourceSlot: staging
