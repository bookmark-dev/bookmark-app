name: $(date:yyyyMMdd)$(rev:.rr)

pr:
  - synaodev

trigger:
- synaodev

stages:
  # - stage: build
  #   jobs:
  #     - job: run_build
  #       steps:
  #         - script: dotnet build
  # - stage: test
  #   jobs:
  #     - job: run_tests
  #       steps:
  #         - script: dotnet test
  # - stage: analyze
  #   jobs:
  #     - job: run_analysis
  #       pool:
  #         vmImage: ubuntu-18.04
  #       steps:
  #         - task: DotnetGlobalToolInstaller@0
  #           inputs:
  #             name: "dotnet-sonarscanner"
  #         - script: |
  #             dotnet sonarscanner begin /k:"bookmark-app" /o:"bookmark-dev" /d:sonar.login=$SONAR_TOKEN /d:sonar.host.url="https://sonarcloud.io/"
  #             dotnet build
  #             dotnet sonarscanner end /d:sonar.login=$SONAR_TOKEN
  #           env:
  #             SONAR_TOKEN: $(SonarToken)
  - stage: pack
    jobs:
      - job: pack_client
        steps:
          - task: Docker@2
            inputs:
              command: login
              # arguments: --username $(AzureContainerUsername) --password $(AzureContainerPassword)
              containerRegistry: bookmark-acr
          - script: |
              docker image build --file client.dockerfile --tag $(AzureContainerRegistry)/bookmark-client .
              docker image push $(AzureContainerRegistry)/bookmark-client
          - task: Docker@2
            inputs:
              command: logout
              containerRegistry: bookmark-acr
      - job: pack_restapi
        steps:
          - task: Docker@2
            inputs:
              command: login
              # arguments: --username $(AzureContainerUsername) --password $(AzureContainerPassword)
              containerRegistry: bookmark-acr
          - script: |
              docker image build --file restapi.dockerfile --tag $(AzureContainerRegistry)/bookmark-restapi .
              docker image push $(AzureContainerRegistry)/bookmark-restapi
          - task: Docker@2
            inputs:
              command: logout
              containerRegistry: bookmark-acr
      - job: pack_ormdata
        steps:
          - task: Docker@2
            inputs:
              command: login
              # arguments: --username $(AzureContainerUsername) --password $(AzureContainerPassword)
              containerRegistry: bookmark-acr
          - script: |
              docker image build --file ormdata.dockerfile --tag $(AzureContainerRegistry)/bookmark-ormdata .
              docker image push $(AzureContainerRegistry)/bookmark-ormdata
          - task: Docker@2
            inputs:
              command: logout
              containerRegistry: bookmark-acr
  - stage: deploy
    jobs:
      # - job: compose_app
      #   pool:
      #     vmImage: ubuntu-18.04
      #   steps:
      #     - task: DockerCompose@0
      #       displayName: Docker Compose
      #       inputs:
      #         action: Run a Docker Compose command
      #         containerregistrytype: Azure Container Registry
      #         azureSubscriptionEndpoint: $(AzureSubscriptionEndpoint)
      #         azureContainerRegistry: $(AzureContainerRegistry)
      #         dockerComposeFile: docker-compose.yaml
      #         dockerComposeCommand: up -d
      #         projectName: bookmark-webapp
      #         containerName: bookmark-webapp
      #         qualifyImageNames: true
      #         buildImages: true
      #         detached: true
      - job: deploy_app
        pool:
          vmImage: ubuntu-18.04
        steps:
          - task: AzureWebAppContainer@1
            displayName: Web App Container
            inputs:
              appName: bookmark-webapp
              azureSubscription: azure
              resourceGroupName: $(AzureResourceGroup)
              multicontainerConfigFile: docker-compose.azure.yaml
              # deployToSlotOrASE: true
              # slotName: staging
      # - job: manage_app
      #   pool:
      #     vmImage: ubuntu-18.04
      #   steps:
      #     - task: AzureAppServiceManage@0
      #       displayName: Manage Services
      #       inputs:
      #         Action: Swap Slots
      #         WebAppName: bookmark-webapp
      #         azureSubscription: azure
      #         ResourceGroupName: $(AzureResourceGroup)
      #         SwapWithProduction: true
      #         SourceSlot: staging
